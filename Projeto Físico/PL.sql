-- BAIXAR A STEAM (CADASTRAR USUARIO) --

CREATE OR REPLACE PROCEDURE BAIXAR_STEAM IS
CNT VARCHAR2(50);
BEGIN
	SELECT TO_CHAR(COUNT(*) + 1) INTO CNT FROM USUARIO;
	INSERT INTO USUARIO VALUES(CNT);
	DBMS_OUTPUT.PUT_LINE('STEAM BAIXADA!');
END;

-- CADASTRAR CONTA -- 

CREATE OR REPLACE PROCEDURE CADASTRAR_CONTA (USERNAME VARCHAR2, SENHA VARCHAR2, LOC_PAIS VARCHAR2, LOC_ESTADO VARCHAR2, LOC_CIDADE VARCHAR2) IS

BEGIN
    INSERT INTO CONTA VALUES (USERNAME, SENHA, 0, LOC_PAIS, LOC_ESTADO, LOC_CIDADE, 0, NULL);
	DBMS_OUTPUT.PUT_LINE('CONTA ' || USERNAME || ' CADASTRADA COM SUCESSO!');
END;

-- LOGAR CONTA EM USUARIO --

CREATE OR REPLACE PROCEDURE LOGAR (CODIGO VARCHAR2, USERNAME2 VARCHAR2, SENHA2 VARCHAR2) IS
SENHA_CONTA VARCHAR2(50);
BEGIN
	SELECT SENHA INTO SENHA_CONTA FROM CONTA WHERE USERNAME = USERNAME2;
	IF SENHA2 = SENHA_CONTA THEN
		INSERT INTO TEM_ACESSO VALUES(USERNAME2, CODIGO);
		DBMS_OUTPUT.PUT_LINE('LOGIN EFETUADO COM SUCESSO!');
	ELSE
		DBMS_OUTPUT.PUT_LINE('USERNAME OU SENHA INVÁLIDO');
	END IF;
END;

-- ADICIONAR CRÉDITOS --

CREATE OR REPLACE PROCEDURE COMPRAR_CREDITO (USERNAME2 VARCHAR2, VALOR NUMBER) IS

BEGIN
    UPDATE CONTA SET SALDO = SALDO + VALOR WHERE USERNAME = USERNAME2; 
	DBMS_OUTPUT.PUT_LINE('CRÉDITOS ADICIONADOS! DINHEIRO NA MÃO, CALCINHA NO CHÃO.');
END;

-- VINCULAR REDE SOCIAL --

CREATE OR REPLACE PROCEDURE VINCULAR_REDE (USERNAME2 VARCHAR2, USERNAME2_REDE VARCHAR2) IS

BEGIN
    UPDATE CONTA SET USERNAME_REDE = USERNAME2_REDE WHERE USERNAME = USERNAME2; 
	DBMS_OUTPUT.PUT_LINE('CONTAS VINCULADAS!');
END;

-- ADICIONAR AMIGOS --

CREATE OR REPLACE PROCEDURE FAZER_AMIZADE (USERNAME1A VARCHAR2, USERNAME2A VARCHAR2) IS
	DATA DATE;
	CNT NUMBER;
BEGIN
	SELECT CURRENT_DATE INTO DATA FROM DUAL;

	SELECT	COUNT(*) INTO CNT FROM AMIGO A WHERE (A.USERNAME1 = USERNAME1A AND A.USERNAME2 = USERNAME2A) OR (A.USERNAME1 = USERNAME2A AND A.USERNAME2 = USERNAME1A);

    IF CNT = 0 THEN
    	INSERT INTO AMIGO VALUES(USERNAME1A, USERNAME2A, DATA);
		DBMS_OUTPUT.PUT_LINE('AMIZADE FEITA :D');
	ELSE
		DBMS_OUTPUT.PUT_LINE('VOCES JÁ SÃO AMIGOS!');
	END IF;
END;

-- CADASTRAR EMPRESA -- 

CREATE OR REPLACE PROCEDURE CADASTRAR_EMPRESA (CNPJ VARCHAR2, NOME VARCHAR2) IS

BEGIN
    INSERT INTO EMPRESA VALUES (CNPJ, NOME);
	DBMS_OUTPUT.PUT_LINE('EMPRESA ' || NOME || ' CADASTRADA COM SUCESSO!');
END;

-- PUBLICAR APLICATIVO --

CREATE OR REPLACE TYPE myarray IS VARRAY(10) OF VARCHAR2(50);

CREATE OR REPLACE PROCEDURE PUBLICAR_APP (NOME VARCHAR2, CNPJ VARCHAR2, CATEGORIAS myarray, PRECO NUMBER, TIPO VARCHAR2) IS
	DATA DATE;
	CNT NUMBER;

BEGIN
	SELECT COUNT(*) INTO CNT FROM EMPRESA E WHERE E.CNPJ = CNPJ;

	IF CNT > 0 THEN
		SELECT CURRENT_DATE INTO DATA FROM DUAL;
		INSERT INTO APLICATIVO VALUES (NOME, PRECO, DATA, CNPJ, TIPO);

		FOR I IN 1 .. CATEGORIAS.COUNT LOOP
			INSERT INTO CATEGORIA VALUES (NOME, CATEGORIAS(I));
		END LOOP;
		DBMS_OUTPUT.PUT_LINE('APP PUBLICADO! SÓ ESPERAR COMPRAREM.');
	ELSE
		DBMS_OUTPUT.PUT_LINE('CNPJ ERRADO, BIXO! AJEITA ISSO AI!');
	END IF;

END;

-- CADASTRAR CONQUISTAS -- 

CREATE OR REPLACE PROCEDURE CADASTRAR_CONQ (NOME_APP VARCHAR2, NOME_CONQUISTA VARCHAR2, DESCRICAO VARCHAR2, RARIDADE VARCHAR2) IS 
	CNT NUMBER;
BEGIN 
    SELECT COUNT(*) INTO CNT FROM APLICATIVO WHERE NOME = NOME_APP;

	IF CNT > 0 THEN
		INSERT INTO CONQUISTA VALUES(NOME_APP, NOME_CONQUISTA, DESCRICAO, RARIDADE);
		DBMS_OUTPUT.PUT_LINE('CONQUISTA CADASTRADA. VAI LÁ DESBLOQUEAR ELA!');
	ELSE
		DBMS_OUTPUT.PUT_LINE('TÁ LOUCO? ESSE APP NÃO EXISTE!');
	END IF;
END;

-- COMPRAR APLICATIVO --

CREATE OR REPLACE PROCEDURE COMPRAR_APP (NOME_APP VARCHAR2, USERNAME2 VARCHAR2) IS
	PRECO_APP NUMBER;
	VALOR NUMBER;
	DATA DATE;

BEGIN
	SELECT CURRENT_DATE INTO DATA FROM DUAL;
	SELECT PRECO_ATUAL INTO PRECO_APP FROM APLICATIVO A WHERE A.NOME = NOME_APP;
	SELECT C.SALDO INTO VALOR FROM CONTA C WHERE C.USERNAME = USERNAME2 AND ROWNUM = 1;

	IF VALOR >= PRECO_APP THEN
		INSERT INTO COMPRA VALUES (USERNAME2, NOME_APP, PRECO_APP, DATA); --ADICIONA NA BIBLIOTECA
		UPDATE CONTA SET SALDO = (SALDO - PRECO_APP) WHERE USERNAME = USERNAME2; --ATUALIZA O SALDO
		DBMS_OUTPUT.PUT_LINE('APLICATIVO COMPRADO! ABRE LOGO AÍ!');
	ELSE
		DBMS_OUTPUT.PUT_LINE('SALDO INSUFICIENTE! FAZ O PIX!');
	END IF;
END;

-- EXECUTAR APLICATIVO--

CREATE OR REPLACE PROCEDURE EXECUTAR_APP (COD_USER VARCHAR2, USERNAME_LOG VARCHAR2, NOME_APP VARCHAR2) IS 
    DATA_INICIO DATE;
	CNT NUMBER;
	USO NUMBER(1);
BEGIN
	SELECT EM_USO INTO USO FROM CONTA WHERE USERNAME = USERNAME_LOG;

	IF USO = 0 THEN
        SELECT COUNT(*) INTO CNT FROM (SELECT NOME FROM COMPRA WHERE NOME = NOME_APP AND USERNAME IN 
    								  (SELECT USERNAME FROM CONTA WHERE USERNAME IN
    								  (SELECT USERNAME FROM TEM_ACESSO WHERE CODIGO = COD_USER)));
    	IF (CNT > 0) THEN
        	SELECT CURRENT_DATE INTO DATA_INICIO FROM DUAL;
    		INSERT INTO HISTORICO_EXEC VALUES(COD_USER, USERNAME_LOG, NOME_APP, DATA_INICIO, NULL);
    		UPDATE CONTA SET EM_USO = 1 WHERE USERNAME = USERNAME_LOG;
        	DBMS_OUTPUT.PUT_LINE('APLICATIVO ABRIU EM!');
    	ELSE
        	DBMS_OUTPUT.PUT_LINE('TU NÃO TEM ESSE APLICATIVO NÃO!');
    	END IF;
	ELSE
    	DBMS_OUTPUT.PUT_LINE('CONTA ' || USERNAME_LOG || ' JÁ TA SENDO USADA!');
	END IF;
END;

-- GANHAR CONQUISTA -- 

CREATE OR REPLACE PROCEDURE GANHAR_CONQUISTA (NOME_APP2 VARCHAR2, NOME_CONQUISTA VARCHAR2, USERNAME_LOG VARCHAR2) IS 
	DATA DATE; 
	CNT NUMBER;
	COD_USER VARCHAR2(50);
	DATA_INICIO DATE;
BEGIN 
    SELECT CURRENT_DATE INTO DATA FROM DUAL;
	SELECT COUNT(*), CODIGO_USUARIO, INICIO INTO CNT, COD_USER, DATA_INICIO 
		FROM HISTORICO_EXEC 
		WHERE (FIM IS NULL) AND (NOME_APP = NOME_APP2) AND (USERNAME_LOGADO = USERNAME_LOG)
		GROUP BY CODIGO_USUARIO, INICIO;

	IF CNT > 0 THEN
		INSERT INTO GANHAR_CONQ VALUES(NOME_APP2, NOME_CONQUISTA, COD_USER, USERNAME_LOG, DATA_INICIO, DATA);
        DBMS_OUTPUT.PUT_LINE('BOOOOOAAAA. CONQUISTA "' || NOME_CONQUISTA || '" DESBLOQUEADA!!');
	ELSE
        DBMS_OUTPUT.PUT_LINE('APP TÁ FECHADO. NÃO GANHOU A CONQUISTA');
	END IF;
END;

-- FECHAR APLICATIVO --

CREATE OR REPLACE PROCEDURE FECHAR_APP (USERNAME2 VARCHAR2) IS 
	DATA DATE; 
	CNT NUMBER;
BEGIN 
    SELECT CURRENT_DATE INTO DATA FROM DUAL; 
	SELECT COUNT(*) INTO CNT FROM HISTORICO_EXEC WHERE USERNAME_LOGADO = USERNAME2 AND FIM IS NULL;

	IF CNT > 0 THEN
	    UPDATE HISTORICO_EXEC SET FIM = DATA WHERE USERNAME2 = USERNAME_LOGADO AND FIM IS NULL;  
	    UPDATE CONTA SET EM_USO = 0 WHERE USERNAME = USERNAME2; 
        DBMS_OUTPUT.PUT_LINE('APLICATIVO FECHADO!');
	ELSE
        DBMS_OUTPUT.PUT_LINE('TÁ FECHANDO O QUE? TU NÃO TEM NADA ABERTO!');
	END IF;
END;

-- HORAS JOGADAS --

CREATE OR REPLACE FUNCTION HORAS_JOGADAS (USERNAME VARCHAR2, NOME VARCHAR2) RETURN NUMBER IS
    SOMA NUMBER := 0;
	DIFF NUMBER;
	CURSOR CUR IS (SELECT 24 * (FIM - INICIO) FROM HISTORICO_EXEC WHERE USERNAME_LOGADO = USERNAME AND NOME_APP = NOME);
BEGIN
    OPEN CUR;
	FETCH CUR INTO DIFF;
    WHILE CUR%FOUND LOOP
		SOMA := SOMA + DIFF;
		FETCH CUR INTO DIFF;
    END LOOP;
	RETURN SOMA;
END;

-- RECEITA GERAL('%') / DE UMA EMPRESA --

CREATE OR REPLACE FUNCTION RECEITA (CNPJ2 VARCHAR2) RETURN NUMBER IS
    SOMA NUMBER := 0;
	VALOR NUMBER;
	CURSOR CUR IS (SELECT PRECO_COMPRA FROM COMPRA WHERE NOME IN (SELECT A.NOME FROM APLICATIVO A WHERE A.CNPJ LIKE CNPJ2));
BEGIN
    OPEN CUR;
	FETCH CUR INTO VALOR;
    WHILE CUR%FOUND LOOP
		SOMA := SOMA + VALOR;
		FETCH CUR INTO VALOR;
    END LOOP;
	RETURN SOMA;
END;

